/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author hp
 */
import javax.swing.*;
import javax.swing.JOptionPane;
import java.awt.*;
import java.io.*;
import java.io.File.*;
import java.net.InetAddress;
import java.util.*;
import java.nio.file.*;
import java.nio.channels.FileChannel;
import java.nio.file.Files;
import java.util.concurrent.*;
import java.net.*;

//import brcmLabAssistant.NMapSelect;
public class front extends javax.swing.JFrame {
    static String abc=regshot();
   static Process startNmap;
 static ProcessBuilder rgs=new ProcessBuilder(abc);
 ProcessBuilder NMap;
 static String loc; // to store the path of folder for pasting in client computer
   
 /**
     * Creates new form front
     */
    public front() {
        System.out.println(System.getProperty("user.dir"));
        initComponents();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(200, 150));

        jPanel1.setEnabled(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("BRCM LAB ASSISTANT");

        jLabel2.setText("Select Folder To Export");

        jLabel3.setText("Select Report's Redo File");

        jTextField1.setEditable(false);
        jTextField1.setText("Folder");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.setEditable(false);
        jTextField2.setText("File");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jButton1.setText("Browse");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Browse");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("NEXT");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel4.setForeground(new java.awt.Color(255, 0, 0));
        jLabel4.setText("Do Not Click On Next Before The First Shot");

        jLabel5.setText("Select Program To Install");
        jLabel5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jTextField3.setEditable(false);
        jTextField3.setText("Program to install");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jButton4.setText("Browse");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(259, 259, 259)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(85, 85, 85)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addGap(57, 57, 57)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jTextField2)
                                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(44, 44, 44)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton2))))))
                .addContainerGap(122, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel1)
                .addGap(128, 128, 128)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton4)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGap(50, 50, 50)
                .addComponent(jLabel4)
                .addGap(43, 43, 43)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
JFileChooser jc=new JFileChooser();
jc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
int val=jc.showOpenDialog(new JFrame());

jc.setDialogTitle("Chose Folder to Export");


if(val==JFileChooser.APPROVE_OPTION)
 
jTextField1.setText(jc.getSelectedFile().getPath());



            
// TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
JFileChooser jc=new JFileChooser();
jc.setFileSelectionMode(JFileChooser.FILES_ONLY);
int val=jc.showOpenDialog(new JFrame());


jc.setDialogTitle("Chose File to Export");


if(val==JFileChooser.APPROVE_OPTION)
 
jTextField2.setText(jc.getSelectedFile().getPath());
System.out.println(jTextField2.getText());
 File srcDir = new File(jTextField2.getText());
 String src=new String(System.getProperty("user.dir"));
 src=src.concat("\\"+jc.getSelectedFile().getName());
 System.out.println(src);
 
 
File destDir = new File(src);
try{Files.copy(srcDir.toPath(), destDir.toPath(), StandardCopyOption.REPLACE_EXISTING);
			System.out.println("File copied :: " + destDir);
                        startNmap.waitFor();
}
catch(Exception e){
    e.printStackTrace();
}
try{
Process cps=Runtime.getRuntime().exec("cmd /c regGen.bat "+jc.getSelectedFile().getName());
}
catch(Exception f){}//startNmap.waitFor();
jButton3.setEnabled(true);
// TODO add your hadling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String must=new String(System.getProperty("user.dir"));
        must=must.concat("\\NMapResult.txt");
        
        //str=str.concat("\\"+jTextField2.getText());
        
        NMapSelect n=new NMapSelect(must,loc);

        
        /* JFrame jf=new JFrame("Nmap");
    JPanel jp=new JPanel();
    jp.setSize(800,800);
    // JCheckBox chk[]=new JCheckBox[9];
     
     String [] str=new String[100];
     String temp=new String();
     int i=0;
     //while(i<9){
    // chk[i].setText("abcd");
     //jp.add(chk[i]);
    //// i++;
    // }
     //i=1;
     String responce=new String();
     String must=System.getProperty("user.dir");
     must=must.concat("\\NMapResult.txt");
     System.out.println(must);
    try{ BufferedReader br=new BufferedReader(new FileReader(must));
while((temp=br.readLine())!=null){
    str[i]=temp;
    
   //chk[i].setSelected(true);
   //jp.add(chk[i]);
 
    System.out.println(str[i]);
i++;    
}}
   
catch(IOException e){
}    
   JList list=new JList(str);
JScrollPane jsp=new JScrollPane(list);

jsp.setPreferredSize(new Dimension(300,90));
//list.setSelectionMode();
//JList list=new JList(str);
  //.add(list); 
  jp.add(jsp);
   
    //jf.setSize(800,800);
     //jp.add(chk[]);
    jf.add(jp);
    jf.setSize(800,800);
jf.setVisible(true);

        // TODO add your handling code here:*/
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
JFileChooser jc=new JFileChooser();
File f=new File("c:\\program files");
jc.setCurrentDirectory(f);
jc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
int val=jc.showOpenDialog(new JFrame());

jc.setDialogTitle("Chose Folder to Export");


if(val==JFileChooser.APPROVE_OPTION)
 
jTextField1.setText(jc.getSelectedFile().getPath());
 loc=jc.getSelectedFile().getParent();
 System.out.println("Your path is "+loc);
File srcDir = new File(jTextField1.getText());
String destdir=System.getProperty("user.dir");
destdir=destdir.concat("\\" +jc.getSelectedFile().getName());
File destDir = new File(destdir);

try {
    copyFolder(srcDir, destDir); 
    Process cps=Runtime.getRuntime().exec("cmd /c compression.bat "+"\""+jc.getSelectedFile().getName()+"\"");
    cps.waitFor();
    recursiveDelete(destDir);
    srcDir=new File("c:\\users\\All users\\Microsoft\\windows\\Start menu\\programs\\"+jc.getSelectedFile().getName());
    try{copyFolder(srcDir,destDir);
    cps=Runtime.getRuntime().exec("cmd /c compressiontemp.bat "+"\""+jc.getSelectedFile().getName()+"\"");
    cps.waitFor();
    recursiveDelete(destDir);
    }catch(Exception e)
    {
    Files.copy(srcDir.toPath(), destDir.toPath(), StandardCopyOption.REPLACE_EXISTING);
    cps=Runtime.getRuntime().exec("cmd /c compressiontemp.bat "+"\""+jc.getSelectedFile().getName()+".lnk\"");
    cps.waitFor();
    }
   
}
catch(Exception e){

                  }

jButton2.setEnabled(true);



    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
JFileChooser jc=new JFileChooser();
jc.setFileSelectionMode(JFileChooser.FILES_ONLY);
int val=jc.showOpenDialog(new JFrame());

jc.setDialogTitle("Chose Folder to Export");


if(val==JFileChooser.APPROVE_OPTION)
 
jTextField2.setText(jc.getSelectedFile().getPath());

// TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
JFileChooser jc=new JFileChooser();
File f=new File("d:\\");
jc.setFileSelectionMode(JFileChooser.FILES_ONLY);
jc.setCurrentDirectory(f);
int val=jc.showOpenDialog(new JFrame());

jc.setDialogTitle("Chose Folder to Export");


if(val==JFileChooser.APPROVE_OPTION)
 
jTextField3.setText(jc.getSelectedFile().getPath());
ProcessBuilder prb=new ProcessBuilder(jTextField3.getText());
try{
    Process po=prb.start();
Process pm=rgs.start();
po.waitFor();

jLabel4.setText("Please take second shot");
pm.waitFor();

}
catch(Exception e){ 
   JOptionPane.showMessageDialog(null,"Please install software manually","Not Enough Rights",2);
   JOptionPane.showMessageDialog(null,"Please Take 1st shot before starting","Information",1);
   try{
       Process pm=rgs.start();
   }catch(Exception en){
       en.printStackTrace(System.out);
   JOptionPane.showMessageDialog(null,abc + " not found","Error! exiting",2);
   System.exit(-1);
   }
  
}

jButton1.setEnabled(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception {
        loc="192.168.225.123";
        while(true){
       
        loc=JOptionPane.showInputDialog(null,"Please provide Gateway","Gateway",3);
        if(loc!=null)break;
        }
        //loc=loc.replaceAll("(", "&chr(40)");
        //loc.replaceAll(")","&chr(41)");
        System.out.println(loc);
       // JOptionPane.showMessageDialog(null,InetAddress.getLocalHost().getHostAddress(),"Your Ip is",1);
        
        
       // JOptionPane p=new JOptionPane();,
       JFrame f=new JFrame("Verifying Connection");
       JPanel p=new JPanel();
      // JLabel l=new JLabel();
      JProgressBar pbar=new JProgressBar();
      pbar.setMinimum(0);
      pbar.setMaximum(15);
       f.setSize(380,80);
       f.setLocation(400,400);
       p.setSize(180,40);
       p.setBounds(300,300,180,40);
      
      p.add(pbar);
       f.add(p);
       f.setVisible(true);
       int valuechk=0;
       InetAddress Gateway=InetAddress.getByName(loc);
        for(int i=0;i<=15;i++)
        {
           
                   if(Gateway.isReachable(2000)){
                   valuechk++;
                   
                   } 
                   pbar.setValue(i);
                   System.out.println(Gateway.isReachable(2000));
                   TimeUnit.MILLISECONDS.sleep(300);
                        
        }
        if(valuechk<12){
            
                JOptionPane.showMessageDialog(null,"Please Check Your Network Connection","network not found",0);
                System.exit(0);
        
        }
        
       f.setVisible(false);
        
         
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(front.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(front.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(front.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(front.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
       
       startNmap=Runtime.getRuntime().exec("cmd /c NMapStart.bat "+loc);
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new front().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables

private static void copyFolder(File sourceFolder, File destinationFolder) throws Exception
	{
		//Check if sourceFolder is a directory or file
		//If sourceFolder is file; then copy the file directly to new location
		if (sourceFolder.isDirectory()) 
		{
			//Verify if destinationFolder is already present; If not then create it
			if (!destinationFolder.exists()) 
			{
				destinationFolder.mkdir();
				System.out.println("Directory created :: " + destinationFolder);
			}
			
			//Get all files from source directory
			String files[] = sourceFolder.list();
			
			//Iterate over all files and copy them to destinationFolder one by one
			for (String file : files) 
			{
				File srcFile = new File(sourceFolder, file);
				File destFile = new File(destinationFolder, file);
				
				//Recursive function call
				copyFolder(srcFile, destFile);
			}
		}
		else 
		{
			//Copy the file content from one place to another 
			Files.copy(sourceFolder.toPath(), destinationFolder.toPath(), StandardCopyOption.REPLACE_EXISTING);
			System.out.println("File copied :: " + destinationFolder);
		}
	}


private static String regshot(){
   String abc=System.getProperty("user.dir");
   abc=abc.concat("\\Regshot-x86-ANSI.exe");
   System.out.println(abc);
   return abc;
}
public static void recursiveDelete(File file) {
        //to end the recursive loop
        if (!file.exists())
            return;
         
        //if directory, go inside and call recursively
        if (file.isDirectory()) {
            for (File f : file.listFiles()) {
                //call recursively
                recursiveDelete(f);
            }
        }
        //call delete to delete files and empty directory
        file.delete();
        System.out.println("Deleted file/folder: "+file.getAbsolutePath());
    }



}
